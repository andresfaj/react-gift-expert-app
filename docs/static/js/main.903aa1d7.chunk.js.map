{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","URL","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","console","log","key","GifExpertApp","reverse","root","document","getElementById","ReactDOM","render"],"mappings":"2MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAoB5C,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,4BAAoBA,GAApB,CAAgCP,OAC9CC,EAAc,OAOd,gCAAOD,GACP,2BACIQ,KAAK,OACLC,MAAOT,EACPU,SAtBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,Y,uBCTnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0DAC6CC,UAAUH,GADvD,sDAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QATvB,kBAaZL,GAbY,4CAAH,sDCEPQ,EAAc,SAAC,GAAW,IAAVN,EAAS,EAATA,IAIzB,OACI,yBAAKO,UAAU,0CACX,yBAAKC,IAAKR,EAAIG,IAAKM,IAAKT,EAAIE,QAC5B,+BAAKF,EAAIE,MAAT,OCJCQ,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAuBtC,OAhBAC,qBAAW,WACPzB,EAAQC,GACHyB,MAAM,SAAAC,GAEHC,YAAW,WAEPJ,EAAS,CACLhB,KAAMmB,EACNL,SAAS,MAGd,UAGZ,CAACrB,IAEGsB,EDnByBM,CAAc5B,GAAjCc,EAFsB,EAE5BP,KAAcc,EAFc,EAEdA,QAKrB,OAHAQ,QAAQC,IAAIT,GAIR,oCACI,gCAAMrB,EAAN,KAEEqB,EAAU,0CAAqB,KAEjC,yBAAKJ,UAAU,aAGPH,EAAOL,KAAI,SAACC,GACR,OAAO,kBAAC,EAAD,CACHqB,IAAQrB,EAAIC,GACZD,IAAQA,UESrBsB,EA7BM,WAAM,MAKa9C,mBAAS,CAAC,WALvB,mBAKhBQ,EALgB,KAKJT,EALI,KAQvB,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAEA,4BAEQS,EAAWe,KAAK,SAAAT,GAEZ,OAAO,kBAAC,EAAD,CACK+B,IAAO/B,EACPA,SAAUA,OAEvBiC,aCrBjBC,G,MAAOC,SAASC,eAAe,SAErCC,IAASC,OACP,kBAAC,EAAD,MACAJ,I","file":"static/js/main.903aa1d7.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n    \r\n    // Aqui estamos diciendo que al dar enter\r\n    // en un form no haga refresh\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2){\r\n            setCategories((categories) => [...categories, inputValue])\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (    \r\n        <form onSubmit={ handleSubmit }>\r\n            <h1> { inputValue }</h1>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange = { handleInputChange }    \r\n            />\r\n        </form>        \r\n    )   \r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) => {\r\n    const URL = `https://api.giphy.com/v1/gifs/search?limit=10&q=${ encodeURI(category) }&api_key=IcS2ANCPXfNGkrse30cQ04PuRf4yjPKw`;\r\n    const resp = await fetch(URL);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map (img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({img}) => {\r\n\r\n    // console.log(img)\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={img.url} alt={img.title}></img>\r\n            <p> {img.title} </p>\r\n        </div>\r\n    )\r\n}\r\n","//Cllection de todos los elementos\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data: images, loading} = useFetchGifs( category );\r\n\r\n    console.log(loading);\r\n\r\n\r\n    return (\r\n        <> \r\n            <h3> {category} </h3>\r\n\r\n            { loading ? <p>Cargando...</p> : null}\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                { \r\n                    images.map((img) => {\r\n                        return <GifGridItem\r\n                            key = { img.id } \r\n                            img = { img }\r\n                        />\r\n                    }) \r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then( imgs => {\r\n\r\n                setTimeout(() => {\r\n\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                    \r\n                }, 3000);    \r\n\r\n            });\r\n    }, [category])\r\n\r\n    return state;\r\n}\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['Avatar','Dark','Stranger things'];\r\n\r\n    //SE HACE ASÍ porque el arreglo puede variar a una const no se puede variar\r\n    const [categories, setCategories] = useState(['Avatar']);\r\n\r\n    \r\n    return (\r\n        <> \r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories = {setCategories} />\r\n            <hr/>\r\n\r\n            <ol>\r\n                { \r\n                    categories.map( category => {\r\n                        // la key={} se agrega porque cada elemente debe ser único según Props\r\n                        return <GifGrid\r\n                                    key = {category} \r\n                                    category={category}\r\n                                />\r\n                    }).reverse()\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(\n  <GifExpertApp />,\n  root\n);\n"],"sourceRoot":""}